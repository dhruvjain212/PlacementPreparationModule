/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 #include<bits/stdc++.h>
 using namespace std;
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        // ListNode* ptr= NULL;
        // ListNode* head= NULL;

        // while(list1 != NULL && list2 != NULL){
        //     if( list1 ->val  <= list2-> val){
        //         if( head == NULL){
        //            int key= list1->val;
        //            ListNode* temp= new ListNode(key);
        //            ptr = temp;
        //            head= temp;
        //         }
        //         else{
        //            int key= list1->val;
        //            ListNode* temp= new ListNode(key);
        //            ptr->next = temp;
        //         }
        //         list1= list1->next;
        //     }
        //     else{
        //          if( head == NULL){
        //            int key= list2->val;
        //            ListNode* temp= new ListNode(key);
        //            ptr = temp;
        //            head= temp;
        //         }
        //         else{
        //            int key= list2->val;
        //            ListNode* temp= new ListNode(key);
        //            ptr->next = temp;
        //         }
        //         list2= list2->next;
        //     }
        // }
        // return head;

        if( l1 == NULL) return l2;
        if( l2 == NULL) return l1;

        if( l1->val > l2->val)  swap(l1, l2);
        ListNode* res= l1;

        while( l1 != NULL && l2 != NULL){
            ListNode* temp= NULL;
            while( l1 != NULL && l1->val <= l2->val){
                temp = l1;
                l1= l1->next;
            }
            temp->next = l2;
            swap(l1, l2);
        }

        return res;
    }
};
