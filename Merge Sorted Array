class Solution {
public:

void swapifGreater(int idx1, int idx2, vector<int>&arr1, vector<int>&arr2){
    if(arr1[idx1] > arr2[idx2]){
        swap(arr1[idx1], arr2[idx2]);
    }
}
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       
    
     
     // ***By using merge sort
//  int size= m-1;
//       for(int i=0; i<n; i++){
//           int k= size;
//           int key= nums2[i];
//           while(k>=0 &&  nums1[k]> key){
//               nums1[k+1]=nums1[k];
//               k--;
//           }
//           nums1[k+1]= key;
//           size++;
//       }

//***By using gap method(optimal approach)
     int len= n+m;
     int gap = (len/2)+(len%2);
     while(gap > 0){
         int left= 0;
         int right= left+ gap;

         while(right< len){
             if( left< n && right >= n){
                 swapifGreater(left, right-n, nums1, nums2);
             }
             else if(left >=n && right >=n){
                   swapifGreater(left-n, right-n, nums1, nums2);
             }
             else{
                   swapifGreater(left, right, nums1, nums2);
             }
             left++;
             right++;
         }

         if(gap == 1) break;
         gap = (gap/2)+(gap%2);
     }
     

     for(int i=0; i<n; i++){
        nums1[i+m]= nums2[i];
     }
    }
  
    
};
