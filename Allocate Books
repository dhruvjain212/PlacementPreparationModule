bool isPossible(vector<int>A, int B, int barrier){
    int allocated_stu = 1; 
    int pages = 0;
    int n= A.size();
    
    for(int i=0; i<n ;i++){
        if( A[i] > barrier){
            return false;
        }
        if(pages + A[i] > barrier){
            allocated_stu ++;
            pages = A[i];
        }
        else{
            pages += A[i];
        }
    }
    if(allocated_stu > B){
        return false;
    }
    
    return true;
}

int Solution::books(vector<int> &A, int B) {
    int n= A.size();
    int mini = INT_MAX;
    int sum = 0;
        int result = 0;
        if( B > A.size()){
            return -1;
        }

    for(int i=0; i<n; i++){
        mini = min(mini, A[i]);
        sum += A[i];
    }
    
    int low = mini;
    int high = sum;
    
    while( low <= high){
        int mid = (low + high)>>1;
        if(isPossible(A, B , mid)){
            result = mid;
            high = mid -1;
        }
        else{
            low = mid+1;
        }
    }
    
    return result;
}
